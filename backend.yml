apiVersion: apps/v1 # se crean pods y tienen ip
kind: Deployment
metadata:
  name: backend-deployment
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata: # se etiquetan los pods
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: klerith/k8s-teslo-backend:1.1.0
        ports:
        - containerPort: 3000
        env:
          - name: APP_VERSION # .env
            value: "1.1.0"
          - name: PORT
            value: "3000"
          - name: STAGE
            value: "prod"
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: postgres-config
                key: DB_NAME
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: postgres-config
                key: DB_HOST
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                name: postgres-config
                key: DB_PORT
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: postgres-secrets
                key: DB_USER
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: DB_PASSWORD
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: backend-secrets
                key: JWT_SECRET

          # - name: POSTGRES_PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       name: backend-secrets
          #       key: DB_PASSWORD
---
apiVersion: v1
kind: Service  # se crea un servicio
metadata:
  name: backend-service
spec:
  type: NodePort
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 3000 # puerto exterior(cualquier puerto)
      targetPort: 3000  # revisar node port en services
      nodePort: 30300  # revisar node port en services

